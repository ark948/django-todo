what this project will contain:
    - simple todo app
    - restful api for todo app (Django Rest Framework)
    - blog (complete with tags, follow/unfollow system, search)
    - restful api for blog
    - sqlite3 for development
    - PostgreSQL for production
    - Docker for production
    - Whitenoise (to server static files in production)
    - Gunicorn (probably)

page -> landing page for home

not running migratinos until a custom user model is created

1. it's time for custom user
    1.1 for that, accounts app is required
    > python manage.py startapp accounts
    1.2 add custom user model to accounts/models.py
    1.3 add accounts app to isntalled_apps
    1.4 add forms for creation and editing of users to accounts/forms.py
    1.5 update accounts/admin.py to use the forms
    Mistake: run migratinos
    > python manage.py makemigrations accounts
    > python manage.py migrate
    1.6 create superuser: admin-admin@example.com-1
    1.7 add and run tests for user in accounts/tests.py
    1.8 check superuser was created successfully

2. adding templates
    2.1 folder templates in root directory
    2.2 add BASE_DIR / "templates" to DIRS in TEMPLATES in settings.py
    2.3 add _base.html to templates
    2.4 add pages folder to templates
    2.5 add index.html to templates/pages
    2.6 update pages:index to render index.html
    2.7 check if it worked
    2.8 update pages:index to class-based views
    2.9 update pages/urls.py
    2.10 update _base.html to be base template
    2.11 update pages/index.html to inehrit from _base.html

3. adding basic authentication
    - for login, logout, sign up. login and logout using django's auth app. sign up must be added manually
    3.1 add auth.urls to core urls.py file: path("accounts/", include("django.contrib.auth.urls")), -> urls.py
    3.2 add links for login and logout to home.html
    3.3 create registration folder in templates
    3.4 add login.html to templates/registration folder
    3.5 add LOGIN_REDIRECT_URL and LOGOUT_REDIRECT_URL to settings.py
    3.6 add urls.py to accounts
    3.7 add signup route to accounts.urls.py
    3.8 add signup view to accounts/views.py
    3.9 include accounts/urls.py in core urls.py
    3.10 add signup.html to template/registration
    3.11 update home.html to include a link towards signup
    update: built-in login and logout must have no app_name prefix (accounts). even though accounts app has app_name in its urls.py
    3.12 add tests for signup feature

4. adding static assets
    - static assets (js, css, images, need to be served separately in production)
    4.1 create static directory in root project directory
    4.2 add css, js, images folders to static folder
    4.3 add base.css to css, base.js to js, and .keep to images folder in static
    4.4 add STATICFILES_DIRS = [BASE_DIR / "static"] to settings.py
    4.5 test if base.css can be properly loaded by adding a simple ruleset to base.css
    4.6 link base.css in _base.html + add add {% load staic %} tag to _base.html
    IMPORTANT: for development, serving static files with django is ok, for production switch to Whitenoise