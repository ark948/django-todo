what this project will contain:
    - simple todo app
    - restful api for todo app (Django Rest Framework)
    - blog (complete with tags, follow/unfollow system, search)
    - restful api for blog
    - sqlite3 for development
    - PostgreSQL for production
    - Docker for production

    - pre-production:
    - Whitenoise (to serve static files)

remaining:
    - collecting static files
    - adding environment variables
    - adding ui library
    - todo app
    - todo app rest api
    - blog app
    - blog app rest api

pages app is the landing page (index)
not running migratinos until a custom user model is created

1. it's time for custom user
    1.1 for that, accounts app is required
    > python manage.py startapp accounts
    1.2 add custom user model to accounts/models.py
    1.3 add accounts app to isntalled_apps
    1.4 add forms for creation and editing of users to accounts/forms.py
    1.5 update accounts/admin.py to use the forms
    Mistake: run migratinos
    > python manage.py makemigrations accounts
    > python manage.py migrate
    1.6 create superuser: admin-admin@example.com-1
    1.7 add and run tests for user in accounts/tests.py
    1.8 check superuser was created successfully

2. adding templates
    2.1 folder templates in root directory
    2.2 add BASE_DIR / "templates" to DIRS in TEMPLATES in settings.py
    2.3 add _base.html to templates
    2.4 add pages folder to templates
    2.5 add index.html to templates/pages
    2.6 update pages:index to render index.html
    2.7 check if it worked
    2.8 update pages:index to class-based views
    2.9 update pages/urls.py
    2.10 update _base.html to be base template
    2.11 update pages/index.html to inehrit from _base.html

3. adding basic authentication
    - for login, logout, sign up. login and logout using django's auth app. sign up must be added manually
    3.1 add auth.urls to core urls.py file: path("accounts/", include("django.contrib.auth.urls")), -> urls.py
    3.2 add links for login and logout to home.html
    3.3 create registration folder in templates
    3.4 add login.html to templates/registration folder
    3.5 add LOGIN_REDIRECT_URL and LOGOUT_REDIRECT_URL to settings.py
    3.6 add urls.py to accounts
    3.7 add signup route to accounts.urls.py
    3.8 add signup view to accounts/views.py
    3.9 include accounts/urls.py in core urls.py
    3.10 add signup.html to template/registration
    3.11 update home.html to include a link towards signup
    update: built-in login and logout must have no app_name prefix (accounts). even though accounts app has app_name in its urls.py
    3.12 add tests for signup feature

4. adding static assets
    - static assets (js, css, images, need to be served separately in production)
    4.1 create static directory in root project directory
    4.2 add css, js, images folders to static folder
    4.3 add base.css to css, base.js to js, and .keep to images folder in static
    4.4 add STATICFILES_DIRS = [BASE_DIR / "static"] to settings.py
    4.5 test if base.css can be properly loaded by adding a simple ruleset to base.css
    4.6 link base.css in _base.html + add add {% load staic %} tag to _base.html
    IMPORTANT: for development, serving static files with django is ok, for production switch to Whitenoise
    - temporarily skipping the rest of this section (collecting static files)

5. adding advanced authentication
    - package to install django-allauth
    - (already have whl files, installation proceed offline if necessary)
    > pip install django-allauth
    > pip freeze > requirements.txt (updating requirements)
    5.1 add django-allauth to isntalled_apps: 'allauth' and 'allauth.account' to INSTALLED_APPS in settings.py
    5.2 also 'django.contrib.sites' must be added to INSTALLED_APPS
    5.3 add SITE_ID to settings.py
    5.4 add allauth's authentication backend to AUTHENTICATION_BACKENDS (this config variable must be explicitly added)
    (it's there but hidden or implicit)
    5.5 specify email backend (default is console backend)
    5.6 add ACCOUNT_LOGOUT_REDIRECT = "home" to settings.py (edit the endpoint accordingly)
    5.7 add allauth's middleware to MIDDLEWARES in settings.py
    5.8 run migrate (no make)
    > python manage.py migrate
    5.9 update the core urls.py file: accounts path (change accounts.urls to allauth.urls - accounts/ url prefix remeains untouched)
    - built-in auth app was used for login and route (delete 01)
    - accounts.urls was used for signup page (delete 02)
    - these two must be replaced with allauth.urls
    5.10 mark accounts/views.SignUpPage and accounts.urls.py file as unused
    5.11 make 'account' directory in templates (django-allauth will look for templates, it is account not accounts)
    5.12 add login.html and signup.html to templates/accounts directory (older login and singup html files can also be moved there)
    - (i will just copy the code)
    5.13 update home.html login and signup links to point to allauth routes by adding _account prefix to endpoint names
    5.14 'remember_me' feature can be disabled by adding ACCOUNT_SESSION_REMEMBER = None to settings.py
    5.15 add intermediary logout page to templates/account/logout.html
    - (for this, logout post action may need to be changed to a simple anchor tag pointing to 'account_logout')
    5.16 check if everything works so far
    PROBLEM 01: remember_me is showing in login page (fixed, set to True to always remember)
    - login (ok), intermediary_logout (not displaying), logout (ok), signup (ok)
    PROBLEM 02: intermediary logout page not showing
    - FIXED by changing the logout form in home.html to anchor tag
    FEATURE TO ADD: successful signup and logout messages
    5.17 to make signup page only ask for password once, add ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False to settings.py (ok)
    5.18 to add email only login: add 4 config variables to settings.py:
        ACCOUNT_USERNAME_REQUIRED = False
        ACCOUNT_AUTHENTICATION_METHOD = "email"
        ACCOUNT_EMAIL_REQUIRED = True
        ACCOUNT_UNIQUE_EMAIL = True
    - note: by doing this, a unique username will be generated upon signup (this will change signup as well as login) using user's email
    - (random numbers will be added to the pre @ part of email address)
    5.19 test if everything works (ok)
    - committing
    5.20 add new tests to accounts/tests.py
    
6. adding email
    6.1 add email folder to account in templates directory
    > mkdir templates\account\email
    6.2 add two files to it: email_confirmation_message.txt and email_confirmation_subject.txt (and copy the content from previous project)
    6.3 edit the domain name in interface sites section (admin > sites)
    - (update the domain name and display name to something else)
    - (e.g. todowithdjango.com , Todo with Django)
    6.4 update the DEFAULT_FROM_EMAIL in settings.py
    - (this setting is used to display the sender in confirmation email when a user signs up)
    - (change it to the admin's email address)
    6.5 add email_confirm.html to templates/account
    6.6 test the following routes:
        - http://127.0.0.1:8000/accounts/password/reset/ (ok)
        - http://127.0.0.1:8000/accounts/password/change/ (ok)
    6.6 test if email confirmation works
    note: email confirmation works, but has no effect
    note: password reset request and password reset change templates need heavy modification (rtl instead of ltr, and language fix)
    
7. adding todo app
    > python manage.py startapp todo
    > commit right now, with empty app
    mistake: add todo app to INSTALLED_APPS in settings.py
    7.1 design model relations
    7.2 add models
    7.3 make and run migrations
    note: database relation between CustomUser and task, user has tasks_list and every task has a owner
    7.4 add todo models to admin interface in todo/admin.py
    7.5 use admin interface to add TaskStatuses (completed, in_progress, delayed, finished)
    error: Task object has no attribute urls
    fixed: every model needed to be registered in admin in separate admin.site.register statements
    note: apparently adding models to admin requires them to be accessible through url
    BUG: TaskStatus in admin interface is displayed TaskStatuss, this is not good
    fixed by adding verbose_name_plural to Meta of TaskStatus model class
    - trying 7.5 again
    7.6 add forms.py to todo app
    7.7 need one form for users to be able to add tasks
    - that form needs to be utilized in a view
    7.8 add lading page for todo app (done)
    7.9 tests for todo models and views and forms must be added
    7.10 upgrading test structure from single file to package with a module for each section (models, forms, views)
    NOTE: for this to work, app's tests.py file must be removed
    STUPID MISTAKTE DETECTED: in TaskStatus, completed and finished are the same thing
    - todo models tests were added